#!/bin/bash

# Input variables
namespace=""

# Intermediate variables
workdir="/tmp/kubectl-vscale"
node=""
container_runtime=""
containerid=""
label=""

function usage_and_exit() {
    cat <<EOF
kubectl vscale - scale up/down CPU resources of a pod instantaneously

Usage:
      kubectl vscale [flags] <podname|label>

Flags:
      -h                          Print this help and exit
      -n, --namespace             k8s namespace of the target pod
      -c, --cpu                   New desired CPU value
      -r, --reset                 Reset to the value in the resource spec
      -u, --unlimited             The sky is the limit!
      -l, --label                 Consider the podname as a label to search for
EOF
    exit 0
}

function parse_arguments() {
    while [ $# -gt 0 ]
    do
        case $1 in
            -h)
                usage_and_exit
                ;;
            -n|--namespace)
                namespace=$2
                shift
                ;;
            -c|--cpu)
                cpu=$2
                shift
                ;;
            -r|--reset)
                reset=1
                ;;
            -u|--unlimited)
                unlimited=1
                ;;
            -l|--label)
                label=1
                ;;
            *)
                pod="$1"
                ;;
        esac
        shift
    done

    if [ "$pod" == "" ]; then
        echo "Pod name missing!!!"
        echo ""
        usage_and_exit
    fi

    if [ "$namespace" == "" ]; then
        namespace="default"
    fi
}

function setup_control_pod() {
    # TODO: possibly make this a daemon set
    cat << EOF > $workdir/vscale-controlpod-$node.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "vscale-controlpod-$node"
spec:
  hostPID: true
  containers:
  - name: controlpod
    image: alpine
    args:
      - /bin/sh
      - "-c"
      - "tail -f /dev/null"
    securityContext:
      privileged: true
  nodeName: $node
EOF

    # start the pod
    # TODO: possibly provide option to force restart pod
    kubectl apply -n $namespace -f $workdir/vscale-controlpod-$node.yaml
    if [ "$?" == "1" ]; then
       echo "Error in apply kubectl resources..."
       exit 1
    fi
    kubectl wait -n $namespace --for condition=ready pod vscale-controlpod-$node
}

function get_cgroup_path() {
    # get pod yaml once - this is the only source for pod uid
    pod_yaml=$(kubectl -n $namespace get pod $pod -o yaml)
    containerid=$(echo "$pod_yaml" | grep "containerID:" | head -n1 | awk -F: '{print $3}' | awk -F/ '{print $3}')

    echo "Container id: $containerid"

    # this find may return multiple results
    cmd="find -L /sys/fs/cgroup/cpu -regex \".*kube.*$containerid.*\/cpu.cfs_quota_us\""
    cg_paths=$(kubectl -n $namespace exec vscale-controlpod-$node -- sh -c "nsenter --target 1 --mount --pid bash -c \"$cmd\"")

    # Pick the shortest path that matches
    cg_path=$(echo "$cg_paths" | awk '{print length(), $0}' | sort -n | head -n1 | awk '{print $2}')
    echo "Chosen cgroup path: $cg_path"
}

function main() {
    parse_arguments "$@"

    # setup workdir
    mkdir -p -m 777 $workdir

    # lookup pod name if in label mode
    if [ "$label" == "1" ]; then
        labelval="$pod"
        pod=$(kubectl -n $namespace get pod -l $labelval | tail -n1 | awk '{print $1}')
        echo "Using label $labelval, looked up pod: $pod"
    fi

    # obtain node of the pod under target
    node=$(kubectl -n $namespace get pod $pod -o jsonpath='{.spec.nodeName}')

    if [ "$node" == "" ]; then
        echo "Node was found to be empty. Refusing to continue."
        exit 1
    fi

    # get controller running on this node, if not already running
    setup_control_pod

    # get cgroup path
    get_cgroup_path

    if [ "$reset" == "1" ]; then
        cpu=$(kubectl -n $namespace get pod $pod -o jsonpath="{.spec.containers[0].resources.limits.cpu}")
        echo "Reseting to pod default: $cpu"
        if [ "$cpu" == "" ]; then
            echo "No pod default limit found."
            unlimited=1
        fi
    fi

    if [ "$cpu" != "" ]; then
        # convert cpu param into shares 
        shares_raw=$(echo "$cpu*100000" | bc)
        shares=${shares_raw%.*}
    fi

    if [ "$unlimited" == "1" ]; then
        echo "Unlimited cpu requested..."
        shares="-1"
    fi

    # update the cfs quota
    cmd="echo $shares > $cg_path"
    kubectl -n $namespace exec vscale-controlpod-$node -- sh -c "nsenter --target 1 --mount --pid bash -c \"$cmd\""

    echo "Reprogrammed CPU usuage."
}

main "$@"
